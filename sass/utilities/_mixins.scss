@mixin prefixing($prop, $value) {
  -webkit-#{$prop}: #{$value};
  -moz-#{$prop}: #{$value};
  -ms-#{$prop}: #{$value};
  -o-#{$prop}: #{$value};
  #{$prop}: #{$value};
}

@mixin prefixing-values($prop, $value) {
  #{$prop}: -webkit-#{$value};
  #{$prop}: -moz-#{$value};
  #{$prop}: -ms-#{$value};
  #{$prop}: -o-#{$value};
  #{$prop}: #{$value};
}

@mixin flex-center-row {
  @include prefixing(display, flex);
  @include prefixing(justify-content, center);
  @include prefixing(align-items, center);
}

@mixin flex-center-column {
  @include prefixing(display, flex);
  @include prefixing(justify-content, center);
  @include prefixing(align-items, center);
  @include prefixing(flex-direction, column);
}

@mixin flex-start-column {
  @include prefixing(display, flex);
  @include prefixing(justify-content, center);
  @include prefixing(align-items, flex-start);
  @include prefixing(flex-direction, column);
}

@mixin flex-end-column {
  @include prefixing(display, flex);
  @include prefixing(justify-content, center);
  @include prefixing(align-items, flex-end);
  @include prefixing(flex-direction, column);
}

@mixin flex-between-row {
  @include prefixing(display, flex);
  @include prefixing(justify-content, space-between);
  @include prefixing(align-items, flex-start);
}

@mixin flex-around-row {
  @include prefixing(display, flex);
  @include prefixing(justify-content, space-around);
  @include prefixing(align-items, flex-start);
}

@mixin flex-evenly-row {
  @include prefixing(display, flex);
  @include prefixing(justify-content, space-evenly);
  @include prefixing(align-items, flex-start);
}

@mixin flex-between-column {
  @include prefixing(display, flex);
  @include prefixing(justify-content, space-between);
  @include prefixing(align-items, center);
  @include prefixing(flex-direction, column);
}

@mixin flex-around-column {
  @include prefixing(display, flex);
  @include prefixing(justify-content, space-around);
  @include prefixing(align-items, center);
  @include prefixing(flex-direction, column);
}

@mixin flex-evenly-column {
  @include prefixing(display, flex);
  @include prefixing(justify-content, space-around);
  @include prefixing(align-items, center);
  @include prefixing(flex-direction, column);
}

@mixin hero-img {
  position: absolute;
  top: 50%;
  left: 50%;
  @include prefixing(transform, translate(-50%, -50%));
}

@mixin reset-bg {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}

@mixin fade($type) {
  @if $type == "hide" {
    visibility: hidden;
    opacity: 0;
  } @else if $type == "show" {
    visibility: visible;
    opacity: 1;
  }
}

@mixin transition($prop, $time, $func, $delaying) {
  @if $func == ease {
    @include prefixing(transition, $prop #{$time}s ease #{$delaying}s);
  } @else if $func == ease-in {
    @include prefixing(transition, $prop #{$time}s ease-in #{$delaying}s);
  } @else if $func == ease-in-out {
    @include prefixing(transition, $prop #{$time}s ease-in-out #{$delaying}s);
  } @else if $func == ease-out {
    @include prefixing(transition, $prop #{$time}s ease-out #{$delaying}s);
  } @else if $func == linear {
    @include prefixing(transition, $prop #{$time}s linear #{$delaying}s);
  }
}

@mixin breakpoint($point) {
  @if $point == tablet {
    @media only screen and (max-width: 992px) {
      @content;
    }
  }

  @if $point == mobile {
    @media only screen and (max-width: 576px) {
      @content;
    }
  }

  @if $point == large {
    @media only screen and (max-width: 1200px) {
      @content;
    }
  }
}

@mixin animation-left-right($duration) {
  -webkit-animation-name: move-left-right;
  animation-name: move-left-right;
  -webkit-animation-duration: $duration;
  animation-duration: $duration;
  -webkit-animation-timing-function: ease-in-out;
  animation-timing-function: ease-in-out;
  -webkit-animation-delay: 0s;
  animation-delay: 0s;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
  -webkit-animation-play-state: running;
  animation-play-state: running;
}

@mixin hero-pic($path-bg-img) {
  width: 100%;
  height: 100vh;
  @include reset-bg;
  background-image: url($path-bg-img);
  background-attachment: fixed;
}

// ! i don't know how to deal or handle font size
// ! but here i've used golden ratio = 1.618
// @mixin font-size($num) {
//   font-size: calc(16px * $num * 1.618);
// }
